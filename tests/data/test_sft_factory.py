# Copyright 2025 Snowflake Inc.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from types import SimpleNamespace

import pytest
from transformers import AutoTokenizer

from arctic_training.data.sft_factory import SFTDataConfig


@pytest.fixture(scope="function")
def sft_data_factory(training_sources):
    config_dict = {
        "type": "sft",
        "sources": training_sources,
    }
    config = SFTDataConfig(**config_dict)

    # We just need an object that specifies the tokenizer and micro batch size
    # for SFT data loading. We don't need to actually run the trainer.
    dummy_trainer = SimpleNamespace(
        config=SimpleNamespace(micro_batch_size=1),
        tokenizer=AutoTokenizer.from_pretrained("HuggingFaceTB/SmolLM-135M-Instruct"),
    )

    return config.factory(dummy_trainer, config)


@pytest.mark.parametrize(
    "training_sources, expected_sum",
    [
        (["HuggingFaceH4/ultrachat_200k-truncated"], 225529637),
        (
            ["HuggingFaceH4/ultrachat_200k-truncated", "Open-Orca/SlimOrca-truncated"],
            355730323,
        ),
    ],
)
def test_generated_data(sft_data_factory, expected_sum):
    training_dataloader, _ = sft_data_factory()

    # Quick check that the data is the same as expected. The sum value was
    # generated by running the test initially and then copying the value.
    tensor_sum = 0
    for batch in training_dataloader:
        for key in ("input_ids", "labels", "position_ids"):
            tensor_sum += batch[key].sum().item()

    assert (
        tensor_sum == expected_sum
    ), f"Incorrect tensor sum: {tensor_sum}. Expected {expected_sum}"
